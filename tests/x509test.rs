//
// AUTOGENERATED by gentests.py on 2022-02-27T14:48:20.473118 -- do not edit
//

use std::convert::TryFrom;

use webpki;

static ALL_SIG_ALGS: &[&webpki::SignatureAlgorithm] = &[
    &webpki::ECDSA_P256_SHA256,
    &webpki::ECDSA_P256_SHA384,
    &webpki::ECDSA_P384_SHA256,
    &webpki::ECDSA_P384_SHA384,
    &webpki::ED25519,
    &webpki::RSA_PKCS1_2048_8192_SHA256,
    &webpki::RSA_PKCS1_2048_8192_SHA384,
    &webpki::RSA_PKCS1_2048_8192_SHA512,
    &webpki::RSA_PKCS1_3072_8192_SHA384,
];

#[test]
fn test_ok_ext_auth_info_access() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-auth-info-access.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_ext_auth_keyid() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-auth-keyid.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_ext_auth_keyid2() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-auth-keyid2.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_ext_basic_constraints() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-basic-constraints.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::CaUsedAsEndEntity
    );
}

#[test]
fn test_ok_ext_cert_policies_any_qual() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-cert-policies-any-qual.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_ext_cert_policies_any() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-cert-policies-any.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_ext_cert_policies_ia5_unotice() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-cert-policies-ia5-unotice.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_ext_cert_policies_unotice() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-cert-policies-unotice.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_ext_cert_policies() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-cert-policies.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_ext_crl_point() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-crl-point.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_ext_ct_sct() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-ct-sct.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_ext_extended_key_usage() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-extended-key-usage.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_ext_extended_key_usage2() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-extended-key-usage2.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_ext_freshest_crl() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-freshest-crl.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_ext_inhibit_anypolicy() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-inhibit-anypolicy.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCriticalExtension
    );
}

#[test]
fn test_ok_ext_issuer_altname() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-issuer-altname.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_ext_key_usage() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-key-usage.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_ext_name_constraints() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-name-constraints.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::CaUsedAsEndEntity
    );
}

#[test]
fn test_ok_ext_policy_constraints() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-policy-constraints.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCriticalExtension
    );
}

#[test]
fn test_ok_ext_policy_map() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-policy-map.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCriticalExtension
    );
}

#[test]
fn test_ok_ext_subject_altname() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-subject-altname.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_ext_subject_altname2() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-subject-altname2.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_ext_subject_dirattr() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-subject-dirattr.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_ext_subject_info_access() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-subject-info-access.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_ext_subject_keyid() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-ext-subject-keyid.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_indefinite_expiry() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-indefinite-expiry.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_issuer_asn1_differ() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/ok-issuer-asn1-differ.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnknownIssuer
    );
}

#[test]
fn test_ok_long_expiry() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-long-expiry.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_long_serial() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-long-serial.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_pubkey_ecdsa_p256v1() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-pubkey-ecdsa-p256v1.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_pubkey_rsa() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-pubkey-rsa.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_uniqueid_incomplete_byte() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/ok-uniqueid-incomplete-byte.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::MissingOrMalformedExtensions
    );
}

#[test]
fn test_ok_utc_time_wrap() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/ok-utc-time-wrap.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::BadDERTime
    );
}

#[test]
fn test_ok_v1() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/ok-v1.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCertVersion
    );
}

#[test]
fn test_ok_v2_issuer_asn1_differ() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/ok-v2-issuer-asn1-differ.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCertVersion
    );
}

#[test]
fn test_ok_v2() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/ok-v2.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCertVersion
    );
}

#[test]
fn test_ok_v3() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-v3.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_ok_inherited_keyparams() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
        &include_bytes!("data/ok-inherited-keyparams.ca.der")[..],
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/ok-inherited-keyparams.leaf.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnknownIssuer
    );
}

#[test]
fn test_ok_intermediate_ca_sign() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
        &include_bytes!("data/ok-intermediate-ca-sign.ca.der")[..],
    ];
    let ee = webpki::EndEntityCert::try_from(&include_bytes!("data/ok-intermediate-ca-sign.leaf.der")[..])
        .expect("cannot parse valid ee cert");
    ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                       &webpki::TLSServerTrustAnchors(&[ca]),
                                       &intermediates[..],
                                       webpki::Time::from_seconds_since_unix_epoch(1645973300))
        .expect("ee cert should be valid");
}

#[test]
fn test_xf_algo_mismatch1() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-algo-mismatch1.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::SignatureAlgorithmMismatch
    );
}

#[test]
fn test_xf_der_invalid_bitstring() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-der-invalid-bitstring.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::MissingOrMalformedExtensions
    );
}

#[test]
fn test_xf_der_invalid_nonminimal_int() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-der-invalid-nonminimal-int.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::BadDER
    );
}

#[test]
fn test_xf_der_invalid_uniqueid() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-der-invalid-uniqueid.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::MissingOrMalformedExtensions
    );
}

#[test]
fn test_xf_ext_altname_invalid_domain() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-altname-invalid-domain.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::BadDER
    );
}

#[test]
fn test_xf_ext_altname_invalid_encoding() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-altname-invalid-encoding.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::BadDER
    );
}

#[test]
fn test_xf_ext_auth_info_critical() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-auth-info-critical.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCriticalExtension
    );
}

#[test]
fn test_xf_ext_auth_keyid_critical() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-auth-keyid-critical.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCriticalExtension
    );
}

#[test]
fn test_xf_ext_constraints_neg_pathlen() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-constraints-neg-pathlen.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::BadDER
    );
}

#[test]
fn test_xf_ext_crl_point_critical() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-crl-point-critical.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCriticalExtension
    );
}

#[test]
fn test_xf_ext_ct_poison() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-ct-poison.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCriticalExtension
    );
}

#[test]
fn test_xf_ext_extended_any_key_usage() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-extended-any-key-usage.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnknownIssuer
    );
}

#[test]
fn test_xf_ext_extended_key_usage_empty() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-extended-key-usage-empty.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::BadDER
    );
}

#[test]
fn test_xf_ext_freshest_crl_critical() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-freshest-crl-critical.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCriticalExtension
    );
}

#[test]
fn test_xf_ext_issuer_altname_critical() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-issuer-altname-critical.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCriticalExtension
    );
}

#[test]
fn test_xf_ext_policy_constraint_empty() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-policy-constraint-empty.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCriticalExtension
    );
}

#[test]
fn test_xf_ext_policy_map_empty() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-policy-map-empty.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCriticalExtension
    );
}

#[test]
fn test_xf_ext_policy_map_from_any() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-policy-map-from-any.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCriticalExtension
    );
}

#[test]
fn test_xf_ext_policy_map_to_any() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-policy-map-to-any.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCriticalExtension
    );
}

#[test]
fn test_xf_ext_policy_map_unref() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-policy-map-unref.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCriticalExtension
    );
}

#[test]
fn test_xf_ext_subject_dirattr_critical() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-subject-dirattr-critical.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCriticalExtension
    );
}

#[test]
fn test_xf_ext_subject_info_critical() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-subject-info-critical.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCriticalExtension
    );
}

#[test]
fn test_xf_ext_subject_keyid_critical() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-subject-keyid-critical.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCriticalExtension
    );
}

#[test]
fn test_xf_gentime_fraction_secs() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-gentime-fraction-secs.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::BadDERTime
    );
}

#[test]
fn test_xf_gentime_no_secs() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-gentime-no-secs.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::BadDERTime
    );
}

#[test]
fn test_xf_gentime_nonzulu() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-gentime-nonzulu.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::BadDERTime
    );
}

#[test]
fn test_xf_issuer_mismatch_v2() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-issuer-mismatch-v2.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCertVersion
    );
}

#[test]
fn test_xf_issuer_mismatch1() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-issuer-mismatch1.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnknownIssuer
    );
}

#[test]
fn test_xf_serial_negative() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-serial-negative.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::BadDER
    );
}

#[test]
fn test_xf_serial_zero() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-serial-zero.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::BadDER
    );
}

#[test]
fn test_xf_unknown_critical_ext() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-unknown-critical-ext.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCriticalExtension
    );
}

#[test]
fn test_xf_utctime_no_secs() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-utctime-no-secs.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::BadDERTime
    );
}

#[test]
fn test_xf_utctime_nonzulu() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-utctime-nonzulu.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::BadDERTime
    );
}

#[test]
fn test_xf_v1_extensions() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-v1-extensions.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCertVersion
    );
}

#[test]
fn test_xf_v1_uniqueid() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-v1-uniqueid.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCertVersion
    );
}

#[test]
fn test_xf_v2_extensions() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-v2-extensions.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnsupportedCertVersion
    );
}

#[test]
fn test_xf_v3_uniqueid_noexts1() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-v3-uniqueid-noexts1.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::MissingOrMalformedExtensions
    );
}

#[test]
fn test_xf_v3_uniqueid_noexts2() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-v3-uniqueid-noexts2.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::MissingOrMalformedExtensions
    );
}

#[test]
fn test_xf_ext_altname_excluded() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
        &include_bytes!("data/xf-ext-altname-excluded.ca.der")[..],
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-altname-excluded.leaf.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnknownIssuer
    );
}

#[test]
fn test_xf_ext_key_usage_wrong() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
        &include_bytes!("data/xf-ext-key-usage-wrong.ca.der")[..],
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-key-usage-wrong.leaf.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnknownIssuer
    );
}

#[test]
fn test_xf_ext_name_excluded_dn() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
        &include_bytes!("data/xf-ext-name-excluded-dn.ca.der")[..],
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-name-excluded-dn.leaf.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnknownIssuer
    );
}

#[test]
fn test_xf_ext_name_excluded_dns() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
        &include_bytes!("data/xf-ext-name-excluded-dns.ca.der")[..],
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-name-excluded-dns.leaf.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnknownIssuer
    );
}

#[test]
fn test_xf_ext_name_excluded_email() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
        &include_bytes!("data/xf-ext-name-excluded-email.ca.der")[..],
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-name-excluded-email.leaf.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnknownIssuer
    );
}

#[test]
fn test_xf_ext_name_excluded_email2() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
        &include_bytes!("data/xf-ext-name-excluded-email2.ca.der")[..],
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-name-excluded-email2.leaf.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnknownIssuer
    );
}

#[test]
fn test_xf_ext_name_excluded_ip() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
        &include_bytes!("data/xf-ext-name-excluded-ip.ca.der")[..],
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-name-excluded-ip.leaf.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnknownIssuer
    );
}

#[test]
fn test_xf_ext_name_excluded_uri() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
        &include_bytes!("data/xf-ext-name-excluded-uri.ca.der")[..],
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-name-excluded-uri.leaf.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnknownIssuer
    );
}

#[test]
fn test_xf_ext_name_excluded_uri2() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
        &include_bytes!("data/xf-ext-name-excluded-uri2.ca.der")[..],
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-name-excluded-uri2.leaf.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnknownIssuer
    );
}

#[test]
fn test_xf_ext_name_excluded() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
        &include_bytes!("data/xf-ext-name-excluded.ca.der")[..],
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-ext-name-excluded.leaf.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnknownIssuer
    );
}

#[test]
fn test_xf_nonca_sign_maybe1() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
        &include_bytes!("data/xf-nonca-sign-maybe1.ca.der")[..],
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-nonca-sign-maybe1.leaf.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnknownIssuer
    );
}

#[test]
fn test_xf_nonca_sign_maybe2() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
        &include_bytes!("data/xf-nonca-sign-maybe2.ca.der")[..],
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-nonca-sign-maybe2.leaf.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnknownIssuer
    );
}

#[test]
fn test_xf_nonca_sign() {
    let ca = include_bytes!("data/fake-ca.der");
    let ca = webpki::TrustAnchor::try_from_cert_der(&ca[..])
        .expect("cannot parse ca cert");
    let intermediates = [
        &include_bytes!("data/xf-nonca-sign.ca.der")[..],
    ];
    assert_eq!(
        webpki::EndEntityCert::try_from(&include_bytes!("data/xf-nonca-sign.leaf.der")[..])
            .and_then(|ee| {
                ee.verify_is_valid_tls_server_cert(&ALL_SIG_ALGS,
                                                   &webpki::TLSServerTrustAnchors(&[ca]),
                                                   &intermediates[..],
                                                   webpki::Time::from_seconds_since_unix_epoch(1645973300))?;
                Ok(ee)
            })
            .and_then(|ee| {
                ee.verify_is_valid_for_dns_name(webpki::DnsNameRef::try_from_ascii_str("example.com").unwrap())
            })
            .expect_err("ee cert/chain/name expected to be invalid"),
        webpki::Error::UnknownIssuer
    );
}

